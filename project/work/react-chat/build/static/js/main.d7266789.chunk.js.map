{"version":3,"sources":["ShowMessages.jsx","Login.jsx","services.js","LoggedIn.jsx","Messages.jsx","ErrorMessage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["showMessages","response","messages","map","message","className","users","sender","username","timestamp","text","Login","setUsername","setMessage","setLoginStatus","setErrorMessage","value","onChange","e","target","onClick","fetch","method","headers","Headers","body","JSON","stringify","catch","Promise","reject","code","then","ok","json","result","fetchLogIn","err","Loggedin","inputMessage","setInputMessage","name","placeholder","Messages","loginStatus","errorMessage","useState","information","LoggedIn","status","useEffect","console","log","chat","styling","ErrorMessage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d7266789.chunk.js","sourcesContent":["import React from 'react';\n\nexport function showMessages(response) {\n    return (\n        response.messages.map(message => (\n            <li>\n                <div className=\"message\">\n                    <div className=\"meta-info\">\n                        <div className=\"sender-info\">\n                            <span className=\"username\">{response.users[message.sender].username}</span>\n\n                        </div>\n                        <div className=\"message-info\">\n                            <span className=\"timestamp\">{message.timestamp}</span>\n                        </div>\n                    </div>\n                    <p className=\"message-text\">{message.text}</p>\n                </div>\n            </li>)));\n}","import { fetchLogIn } from './services';\nimport { showMessages } from './ShowMessages';\nimport React from 'react';\n\nconst Login = ({ username, setUsername, setMessage, setLoginStatus, setErrorMessage }) => {\n\n    return (\n        <div className=\"login\">\n            <input value={username} onChange={(e) => setUsername(e.target.value)} />\n            <button onClick={() => {\n                fetchLogIn(username)\n                    .then((response) => {\n                        const messages = showMessages(response);\n                        setMessage(messages);\n                        setLoginStatus(\"YES\");\n                        setErrorMessage('');\n                    })\n                    .catch((err) => {\n                        setErrorMessage(err.code);\n                    });\n            }}>\n                Login\n                 </button>\n\n        </div>\n    );\n}\n\nexport default Login;\n","\nexport const fetchLogout = () => {\n    return fetch('/session/', {\n        method: 'DELETE',\n    })\n        .catch(() => {\n            return Promise.reject({ code: 'There is a network-error' });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response;\n        });\n};\n\nexport const fetchLogIn = (username) => {\n    return fetch('/session', {\n        method: 'POST',\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ username }),\n    })\n        .catch(() => {\n            return Promise.reject({ code: 'There is a networkerror' });\n        })\n        .then((response) => {\n\n            if (!response.ok) {\n                return response.json().then(\n                    result => Promise.reject(result)\n                );\n\n            }\n            return response.json();\n        });\n}\n\nexport const fetchLoginStatus = () => {\n    return fetch('/session', {\n        method: 'GET',\n    })\n        .catch(() => {\n            console.log('catched');\n            return Promise.reject({ code: 'There is a network-error' });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n};\n\nexport const fetchSendMessage = (message) => {\n\n    return fetch('/sendMessage', {\n        method: \"POST\",\n        headers: new Headers({\n            'content-type': 'application/json',\n        }),\n        body: JSON.stringify({ message }),\n    })\n        .catch(() => {\n            return Promise.reject({ code: 'There is a network-error' });\n        })\n        .then((response) => {\n            if (!response.ok) {\n                return response.json().then(result => Promise.reject(result));\n            }\n            return response.json();\n        });\n};","import { showMessages } from './ShowMessages';\nimport React from 'react';\nimport {\n    fetchLogout,\n    fetchSendMessage,\n} from './services';\n\n\nconst Loggedin = ({ inputMessage, setInputMessage, username, setUsername, setMessage, setLoginStatus, setErrorMessage }) => {\n\n    return (\n\n        <div className=\"input-area\">\n            <div className=\"login-username\">Username: {username}</div>\n            <input className=\"to-send\" value={inputMessage} name=\"text\" placeholder=\"Enter message to send\"\n                onChange={(e) => setInputMessage(e.target.value)} />\n            <button onClick={() => {\n                fetchSendMessage(inputMessage)\n                    .then((response) => {\n                        const messages = showMessages(response);\n                        setMessage(messages);\n                        setInputMessage('');\n                        setErrorMessage('');\n                    })\n                    .catch((err) => {\n                        setErrorMessage(err.code);\n                    });\n            }}>Send</button>\n            <br/>\n            <button onClick={() => {\n                fetchLogout()\n                    .then(() => {\n                        setLoginStatus(\"NO\");\n                        setMessage('The Chat Room');\n                        setUsername('');\n                        setErrorMessage('');\n                    })\n                    .catch((err) => {\n                        setErrorMessage(err.code);\n                    });\n\n            }}>Logout</button>\n        </div>\n    );\n}\n\nexport default Loggedin;","import React, { useEffect, useState } from 'react';\nimport {\n    fetchLoginStatus,\n} from './services';\n\nimport Login from './Login';\nimport { showMessages } from './ShowMessages';\nimport LoggedIn from './LoggedIn';\n\n\nfunction Messages({ loginStatus, setLoginStatus, errorMessage, setErrorMessage }) {\n    const [message, setMessage] = useState('The Chat Room');\n    const [inputMessage, setInputMessage] = useState('');\n    const [username, setUsername] = useState('')\n\n    let information = '';\n\n    if (loginStatus === \"YES\") {\n        information = (\n            <LoggedIn\n                inputMessage={inputMessage} setInputMessage={(inputMessage) => setInputMessage(inputMessage)}\n                username={username} setUsername={(username) => setUsername(username)}\n                message={message} setMessage={(message) => setMessage(message)}\n                loginStatus={loginStatus} setLoginStatus={(status) => setLoginStatus(status)}\n                errorMessage={errorMessage} setErrorMessage={(errorMessage) => { setErrorMessage(errorMessage) }}\n\n            />);\n    } else {\n        information = (\n            <Login\n                username={username} setUsername={(username) => setUsername(username)}\n                message={message} setMessage={(message) => setMessage(message)}\n                loginStatus={loginStatus} setLoginStatus={(status) => setLoginStatus(status)}\n                errorMessage={errorMessage} setErrorMessage={(errorMessage) => { setErrorMessage(errorMessage) }}\n            />);\n    }\n\n\n    useEffect(() => {\n        if (loginStatus === \"NO\") {\n            fetchLoginStatus()\n                .then(chat => {\n                    if (chat) {\n                        setLoginStatus(\"YES\");\n                        setMessage(showMessages(chat));\n                        setErrorMessage('');\n                    }\n                })\n                .catch((err) => {\n                    setErrorMessage(err.code);\n                });\n        }\n    }, []);\n\n\n    let styling = 'blank';\n    if (message) {\n        styling = 'info';\n    }\n    return (\n        <div className=\"content\">\n            <div className={styling}>{message}</div>\n            <div className=\"login-status\">Logged In: {loginStatus}</div>\n            {information}\n        </div>\n    );\n\n};\n\nexport default Messages;\n","import React from 'react';\n\nfunction ErrorMessage({ errorMessage}) {\n    return (\n        <div className=\"error-message\">\n            {errorMessage}\n        </div>\n    );\n};\n\nexport default ErrorMessage;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Messages from './Messages';\nimport ErrorMessage from './ErrorMessage';\n\nfunction App() {\n  const [loginStatus, setLoginStatus] = useState('NO');\n  const [errorMessage, setErrorMessage ] = useState('');\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <Messages \n          loginStatus={loginStatus} setLoginStatus={(loginStatus) => {setLoginStatus(loginStatus)}}\n          errorMessage={errorMessage} setErrorMessage={(errorMessage) => {setErrorMessage(errorMessage)}} \n          />\n          <ErrorMessage errorMessage={errorMessage} setErrorMessage={(errorMessage) => {setErrorMessage(errorMessage)}}/>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}